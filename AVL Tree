#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node *left;
	struct node *right;
	int height;
};
int max(int a,int b);
int height(struct node *N)
{
	if(N==NULL)
	{
		return 0;
	}
	return(N->height);
}
int max(int a, int b)
{
return (a>b)?a:b;
}
struct node *create(int data)
{
	struct node *newnode=(struct node*)malloc(sizeof(struct node));
	newnode->data=data;
	newnode->left=NULL;
	newnode->right=NULL;
	newnode->height=1;
	return newnode;
}
struct node* rightrotate(struct node* y )
{
	struct node* x=y->left;
	struct node* t2=x->right;
	x->right=y;
	y->left=t2;
	
	y->height=max(height(y->left),height(y->right))+1;
	x->height=max(height(x->left),height(x->right))+1;
	return x;
}
struct node* leftrotate(struct node* x )
{
	struct node* y=x->right;
	struct node* t2=y->left;
	y->left=x;
	x->right=t2;
	x->height=max(height(x->left),height(x->right))+1;
	y->height=max(height(y->left),height(y->right))+1;
	return y;
}
int balancefactor(struct node* root)
{
	if(root==NULL)
	{
		return 0;
	}
	return height(root->left)-height(root->right);
}
struct node* insert(struct node* root,int data)
{
int balance;

	if(root==NULL)
	{
		root=create(data);
		
	}
	else if(data<=root->data)
	{
		root->left=insert(root->left,data);
	}
	else
	{
		root->right=insert(root->right,data);
	}
	root->height=1+max(height(root->left),height(root->right));
	balance=balancefactor(root);
	if(balance>1&&data<root->left->data)
	{
		return rightrotate(root);
	}
	if(balance<-1&&data>root->right->data)
	{
		return leftrotate(root);
	}
	if(balance>1&&data>root->left->data)
	{
		root->left=leftrotate(root->left);
		return rightrotate(root);
		
	}
	if(balance<-1&&data<root->right->data)
	{
		root->right=rightrotate(root->right);
		return leftrotate(root);
		
	}
	return root; 
}
struct node* search(struct node* root)
{
	if(root==NULL)
	{
		return;
	}
	search(root->left);
	printf("%d ",root->data);
	search(root->right);
}


int main()
{
	
		struct node* root=NULL;
  root = insert(root, 10); 
  root = insert(root, 20); 
  root = insert(root, 30); 
  root = insert(root, 40); 
  root = insert(root, 50); 
  root = insert(root, 25); 

	
	
	search(root);	
}
